from keras.models import Model

from keras.layers import Input, GaussianNoise, CuDNNGRU, TimeDistributed, Dense

class GRU_Model(object):
    
    def __init__(self,options):

        inputs = Input(shape=(None,options["num_features"]))
        noise = GaussianNoise(options["noise"])(inputs)

        # GRU layers share number of hidden layer parameter
        gru_1a = CuDNNGRU(options["gru"], return_sequences=True)(noise)
        gru_2a = CuDNNGRU(options["gru"], return_sequences=True)(gru_1a)
        gru_3a = CuDNNGRU(options["gru"], return_sequences=True)(gru_2a)
        gru_4a = CuDNNGRU(options["gru"], return_sequences=True)(gru_3a)

        
        bottleneck = TimeDistributed(Dense(options["bottleneck"]))(gru_4a)
        bottleneck_input = Input(shape=(None,options["bottleneck"]))

        gru_1b = CuDNNGRU(options["gru"], return_sequences=True)
        gru_2b = CuDNNGRU(options["gru"], return_sequences=True)
        gru_3b = CuDNNGRU(options["gru"], return_sequences=True)
        gru_4b = CuDNNGRU(options["out_features"], return_sequences=True)

        # Training setup
        gru_1b_t = gru_1b(bottleneck)
        gru_2b_t = gru_2b(gru_1b_t)
        gru_3b_t = gru_3b(gru_2b_t)
        gru_4b_t = gru_4b(gru_3b_t)

        # Decoder inference setup
        gru_1b_i = gru_1b(bottleneck_input)
        gru_2b_i = gru_2b(gru_1b_i)
        gru_3b_i = gru_3b(gru_2b_i)
        gru_4b_i = gru_4b(gru_3b_i)

        self.encoder = Model(inputs, bottleneck)
        print(self.encoder.summary())
        self.decoder = Model(bottleneck_input, gru_4b_i)
        self.trainer = Model(inputs, gru_4b_t)

        print(self.trainer.summary())
